name: Deploy AI Document Parser

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.0
          
      - name: Create terraform.tfvars file
        run: |
          cat > terraform/terraform.tfvars << EOF
          api_key = "${{ secrets.API_KEY }}"
          db_host = "${{ secrets.DB_HOST }}"
          db_name = "${{ secrets.DB_NAME }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          db_port = "${{ secrets.DB_PORT }}"
          db_user = "${{ secrets.DB_USER }}"
          openai_api_key = "${{ secrets.OPENAI_API_KEY }}"
          aws_region = "${{ secrets.AWS_REGION }}"
          EOF
          
      - name: Check if initial deployment is needed
        id: check_deployment
        run: |
          if aws lambda get-function --function-name ai-doc-parser-lambda 2>/dev/null; then
            echo "update_only=true" >> $GITHUB_OUTPUT
          else
            echo "update_only=false" >> $GITHUB_OUTPUT
          fi
          
          # Get ECR URI for later use either way
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPO_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ai-doc-parser-ecr"
          echo "ecr_repo_uri=${ECR_REPO_URI}" >> $GITHUB_OUTPUT
      
      # Initial Deployment - First stage: Create ECR repository
      - name: Terraform Init (Initial Deployment)
        if: steps.check_deployment.outputs.update_only == 'false'
        working-directory: terraform
        run: terraform init
        
      - name: Deploy ECR and S3 (Initial Deployment)
        if: steps.check_deployment.outputs.update_only == 'false'
        working-directory: terraform
        run: |
          # Apply terraform with targets to create ECR and S3 first
          terraform apply -auto-approve -target=aws_ecr_repository.ai_doc_parser -target=aws_s3_bucket.ai_doc_parser -target=aws_s3_bucket_ownership_controls.ai_doc_parser
      
      # Run for both initial and updates
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Tesseract training data
        run: |
          wget https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata
          mkdir -p tessdata
          mv eng.traineddata tessdata/
      
      - name: Build Docker image
        run: |
          docker build -t ai-doc-parser:latest .
          
      - name: Push Docker image
        env:
          ECR_REPO_URI: ${{ steps.check_deployment.outputs.ecr_repo_uri }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REPO_URI}
          docker tag ai-doc-parser:latest ${ECR_REPO_URI}:latest
          docker push ${ECR_REPO_URI}:latest
      
      # Initial Deployment - Second stage: Create remaining resources
      - name: Deploy Remaining Infrastructure (Initial Deployment)
        if: steps.check_deployment.outputs.update_only == 'false'
        working-directory: terraform
        run: |
          # Apply terraform to create remaining resources
          terraform apply -auto-approve
          
      # Only run for updates
      - name: Update Lambda Function (Updates Only)
        if: steps.check_deployment.outputs.update_only == 'true'
        env:
          ECR_REPO_URI: ${{ steps.check_deployment.outputs.ecr_repo_uri }}
        run: |
          # Update the Lambda function's image
          aws lambda update-function-code \
            --function-name ai-doc-parser-lambda \
            --image-uri ${ECR_REPO_URI}:latest
          
          echo "Lambda function updated with new container image"
          
      - name: Output API URL (Initial Deployment)
        if: steps.check_deployment.outputs.update_only == 'false'
        working-directory: terraform
        run: |
          echo "API URL: $(terraform output api_url)"
          
      - name: Output API URL (Updates)
        if: steps.check_deployment.outputs.update_only == 'true'
        run: |
          # Get the API URL for existing deployment
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='ai-doc-parser-api'].id" --output text)
          echo "API URL: https://${API_ID}.execute-api.${{ secrets.AWS_REGION }}.amazonaws.com/prod"
