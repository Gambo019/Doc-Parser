name: Deploy AI Document Parser

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.0
          
      - name: Create terraform.tfvars file
        run: |
          cat > terraform/terraform.tfvars << EOF
          api_key = "${{ secrets.API_KEY }}"
          db_host = "${{ secrets.DB_HOST }}"
          db_name = "${{ secrets.DB_NAME }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          db_port = "${{ secrets.DB_PORT }}"
          db_user = "${{ secrets.DB_USER }}"
          openai_api_key = "${{ secrets.OPENAI_API_KEY }}"
          aws_region = "${{ secrets.AWS_REGION }}"
          EOF
          
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
        
      - name: Check if resources exist
        id: check_resources
        run: |
          # Check if ECR repository exists
          if aws ecr describe-repositories --repository-names ai-doc-parser-ecr 2>/dev/null; then
            echo "ECR repository exists"
            echo "ecr_exists=true" >> $GITHUB_OUTPUT
          else
            echo "ECR repository does not exist"
            echo "ecr_exists=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if Lambda function exists
          if aws lambda get-function --function-name ai-doc-parser-lambda 2>/dev/null; then
            echo "Lambda function exists"
            echo "lambda_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Lambda function does not exist"
            echo "lambda_exists=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if S3 bucket exists
          if aws s3api head-bucket --bucket ai-doc-parser-s3 2>/dev/null; then
            echo "S3 bucket exists"
            echo "s3_exists=true" >> $GITHUB_OUTPUT
          else
            echo "S3 bucket does not exist"
            echo "s3_exists=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if IAM role exists
          if aws iam get-role --role-name ai-doc-parser-lambda-role 2>/dev/null; then
            echo "IAM role exists"
            echo "iam_exists=true" >> $GITHUB_OUTPUT
          else
            echo "IAM role does not exist"
            echo "iam_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Import existing resources into Terraform state if they exist
        working-directory: terraform
        run: |
          # Only import if resources exist
          if [[ "${{ steps.check_resources.outputs.ecr_exists }}" == "true" ]]; then
            echo "Importing ECR repository into Terraform state"
            terraform import aws_ecr_repository.ai_doc_parser ai-doc-parser-ecr || true
          fi
          
          if [[ "${{ steps.check_resources.outputs.iam_exists }}" == "true" ]]; then
            echo "Importing IAM role into Terraform state"
            terraform import aws_iam_role.lambda_role ai-doc-parser-lambda-role || true
          fi
          
          if [[ "${{ steps.check_resources.outputs.s3_exists }}" == "true" ]]; then
            echo "Importing S3 bucket into Terraform state"
            terraform import aws_s3_bucket.ai_doc_parser ai-doc-parser-s3 || true
          fi
          
          if [[ "${{ steps.check_resources.outputs.lambda_exists }}" == "true" ]]; then
            echo "Importing Lambda function into Terraform state"
            terraform import aws_lambda_function.ai_doc_parser ai-doc-parser-lambda || true
          fi
        continue-on-error: true
            
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Tesseract training data
        run: |
          wget https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata
          mkdir -p tessdata
          mv eng.traineddata tessdata/
      
      - name: Build Docker image
        run: |
          docker build -t ai-doc-parser:latest .
          
      - name: Push Docker image
        env:
          ECR_REPO_NAME: ai-doc-parser-ecr
        run: |
          # Create ECR repository if it doesn't exist
          if [[ "${{ steps.check_resources.outputs.ecr_exists }}" == "false" ]]; then
            echo "Creating ECR repository"
            aws ecr create-repository --repository-name ${ECR_REPO_NAME} || true
          fi
          
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPO_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${ECR_REPO_NAME}"
          
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REPO_URI}
          docker tag ai-doc-parser:latest ${ECR_REPO_URI}:latest
          docker push ${ECR_REPO_URI}:latest
          
      - name: Deploy infrastructure with Terraform
        working-directory: terraform
        run: terraform apply -auto-approve
        
      - name: Output API URL
        working-directory: terraform
        run: |
          echo "API URL: $(terraform output api_url)"
